if (!bog) {
    var bog = {};
}
bog.api = {
    uri: {
        auth: {
            isAuthenticated: '/auth/api/isauthenticated',
            logout: '/auth/api/logout'
        },
        search: {

        },
        profile: 'api/profile/',

        donations: 'api/donations/',
        donation: 'api/donation/',

        events: '/api/events/',
        event: '/api/event/',

        event_types: '/api/event_types/',
        event_type: '/api/event_type/',

        event_statuses: 'api/event/statuses/',

        solicitations: 'api/solicitations/',
        solicitation: 'api/solicitation/'
    }
};

if (!bog) {
    var bog = {};
}
bog.cache = function () {
    var has_local_storage = function () {
        var test = 'test';
        try {
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        } catch (e) {
            return false;
        }
    };
    var get_json = function (variable, callback) {
        if (has_local_storage) {
            var ls_item = JSON.parse(localStorage.getItem(variable));
            callback(ls_item);
        } else {
            callback(null);
        }
    };
    var set_json = function (key, value, callback) {
        if (has_local_storage) {
            localStorage.setItem(key, JSON.stringify(value));
        } else {
            // TODO implement secondary caching.
        }
    };

    var get_text = function (key, callback) {
        if (has_local_storage) {
            var ls_item = localStorage.getItem(key);
            if (callback) {
                callback(ls_item);
            } else {
                return ls_item;
            }
        } else {
            if (callback) {
                callback(null);
            } else {
                return null;
            }
        }
    };

    var set_text = function (key, value, callback) {
        if (has_local_storage) {
            localStorage.setItem(key, value);
        } else {
            return null;
        }
    };
    return {
        get_json: get_json,
        set_json: set_json,
        get_text: get_text,
        set_text: set_text
    };
};

window.mod_list = [];
window.current_culture = null;
if (!bog) {
    var bog = {};
}
bog.i18n = function () {
    var get_localization_text = function (culture, path, callback) {
        var cache = new bog.cache();
        var loc_key = culture.replace('-', '_') + '.' + path;
        cache.get_json(loc_key, function (loc_text) {
            // 1.  Check local storage for specific text.
            if (loc_text) {
                callback(loc_text);
            } else {
                // 2.  Check server for specific text.
                var api_key =
                    $.getJSON('/api/i18n/text/' + loc_key, function (loc_text) {
                        cache.set_json(loc_key, loc_text);
                        callback(loc_text);
                    })
                        .fail(function () {
                            if (loc_key.split('.').length === 5) {
                                var loc_key_arr = loc_key.split('.');
                                loc_key_arr.pop();
                                loc_key = loc_key_arr.join('.');
                                cache.get_json(loc_key, function (loc_text) {
                                    // 3.  Check local storage for generic text.
                                    if (loc_text) {
                                        callback(loc_text);
                                    } else {
                                        // 4.  Check server for generic text.
                                        $.getJSON('/api/i18n/text/' + loc_key, function (loc_text) {
                                            cache.set_json(loc_key, loc_text);
                                            callback(loc_text);
                                        })
                                            .fail(function () {
                                                callback(null);
                                            });
                                    }
                                });
                            } else {
                                callback(null);
                            }
                        });
            }
        });
    };

    var get_current_culture = function (callback) {
        if (window.current_culture) {
            callback(window.current_culture);
        } else {
            var cache = new bog.cache();
            cache.get_text('current_culture', function (culture) {
                // 1.  Check local storage for selected culture.
                if (culture) {
                    callback(culture);
                } else {
                    // 2.  Check server for specific file.
                    $.get('/api/i18n/culture', function (culture) {
                        cache.set_text('current_culture:  ', culture);
                        callback(culture);
                    })
                        .fail(function () {
                            if (window.current_culture) {
                                callback(window.current_culture);
                            } else {
                                callback('en-US');
                            }
                        });
                }
            });
        }
    };

    var localize_markup = function (markup, culture, key, callback) {
        if (!markup) {
            throw 'Invalid markup';
        }
        if (culture) {
            get_localization_text(culture, key, function (loc_text) {
                if (loc_text) {
                    __render_localized_markup(markup, loc_text, function (localized_markup) {
                        callback(localized_markup);
                    });
                } else {
                    // No text available.  Return markup.
                    callback(markup);
                }
            });
        } else {
            // Determine culture
            get_current_culture(function (culture) {   // 'en-US';  // TODO: detect culture
                if (!culture) {
                    throw 'invalid culture';
                } else {
                    culture = culture.replace('-', '_');
                }

                get_localization_text(culture, key, function (loc_text) {
                    if (loc_text) {
                        __render_localized_markup(markup, loc_text, function (localized_markup) {
                            callback(localized_markup);
                        });
                    } else {
                        // No text available.  Return markup.
                        callback(markup);
                    }
                });
            });
        }
    };

    var __render_localized_markup = function (markup, l10n_dictionary, callback) {
        var self = this;
        var rendered_markup = $(markup);

        $.each(rendered_markup.find("[data-localize-key]"), function (index, element) {
            var loc_key = element.getAttribute("data-localize-key");
            var loc_target = element.getAttribute("data-localize-target");

            if (l10n_dictionary) {
                var key_text = __value_by_string(loc_key, l10n_dictionary);
                switch (loc_target) {
                    case 'text':
                        element.innerText = key_text;
                        break;
                    case 'html':
                        element.innerHTML = key_text;
                        break;
                    case 'form-group':
                        $(element).children('label').text(key_text.label);
                        $(element).children('input').attr('placeholder', key_text.placeholder);
                        break;
                }
            } else {
                // show placeholder text
                switch (loc_target) {
                    case 'text':
                        element.innerText = '[][][][][][][][][][][][]';
                        break;
                    case 'html':
                        element.innerHTML = '[][][][][][][][][][][][]';
                        break;
                    case 'form-group':
                        $(element).children('label').text('[][][][][][][][][][][][]');
                        $(element).children('input').attr('placeholder', '[][][][][][][][][][][][]');
                        break;
                }
            }
        });
        callback(rendered_markup);
    };

    var __value_by_string = function (s, o) {
        s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
        s = s.replace(/^\./, '');           // strip a leading dot
        var a = s.split('.');
        while (a.length) {
            var n = a.shift();
            if (n in o) {
                o = o[n];
            } else {
                return;
            }
        }

        return o;
    };

    var __change_culture = function (new_culture) {
        get_current_culture(function (current_culture) {
            if (new_culture !== current_culture) {
                for (var i = 0; i < window.mod_list.length; i++) {
                    (function (i) {
                        //in this case, "i" is the one from our immediate function argument
                        var mod_markup = document.getElementById(window.mod_list[i]);
                        localize_markup(mod_markup, new_culture, window.mod_list[i], function (localized_markup) {
                            $(mod_markup).replaceWith(localized_markup);
                        });
                    }(i)); // jshint ignore:line
                }
                window.current_culture = new_culture;
            } else {
                console.log('attempting to change culture to the current culture');
            }
        });
    };

    return {
        localize_markup: localize_markup,
        get_loc_text: get_localization_text,
        get_culture: get_current_culture,
        change_culture: __change_culture
    };
};
if (!bog) {
    var bog = {};
}
bog.session = {
    isAuthenticated: function (callback) {
        $.ajax("auth/api/isAuthenticated", {
            type: "GET",
            dataType: "json",
            complete: function (xhr) {
                if (xhr.status == 200) {
                    callback(true);
                } else {
                    callback(false);
                }
            }
        });
    },
    sessionUser: function () {

    }
};
if (!bog) {
    var bog = {};
}
bog.site = function () {
    var getContentNavigation = function () {
        var loc_root = 'nav.';
        return [
            { link: '#/events', label: 'Events', key: loc_root + 'events', new_window: 'false', class: '' },
            { link: '#/donations', label: 'Donations', key: loc_root + 'donations', new_window: 'false', class: '' },
            { link: '#/solicitations', label: 'Solicitations', key: loc_root + 'solicitations', new_window: 'false', class: '' },
            { link: '#/blog', label: 'Blog', key: loc_root + 'blog', new_window: 'false', class: '' },
            { link: '#/philosophy', label: 'Philosophy', key: loc_root + 'philosophy', new_window: 'false', class: '' },
            { link: '#/about', label: 'About', key: loc_root + 'about', new_window: 'false', class: '' }
        ];
    };
    return {
        getContentNavigation: getContentNavigation
    };
};